// Generated by gencpp from file dm_motor/MotorFeedback.msg
// DO NOT EDIT!


#ifndef DM_MOTOR_MESSAGE_MOTORFEEDBACK_H
#define DM_MOTOR_MESSAGE_MOTORFEEDBACK_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace dm_motor
{
template <class ContainerAllocator>
struct MotorFeedback_
{
  typedef MotorFeedback_<ContainerAllocator> Type;

  MotorFeedback_()
    : pos(0.0)
    , vel(0.0)
    , t(0.0)  {
    }
  MotorFeedback_(const ContainerAllocator& _alloc)
    : pos(0.0)
    , vel(0.0)
    , t(0.0)  {
  (void)_alloc;
    }



   typedef float _pos_type;
  _pos_type pos;

   typedef float _vel_type;
  _vel_type vel;

   typedef float _t_type;
  _t_type t;





  typedef boost::shared_ptr< ::dm_motor::MotorFeedback_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::dm_motor::MotorFeedback_<ContainerAllocator> const> ConstPtr;

}; // struct MotorFeedback_

typedef ::dm_motor::MotorFeedback_<std::allocator<void> > MotorFeedback;

typedef boost::shared_ptr< ::dm_motor::MotorFeedback > MotorFeedbackPtr;
typedef boost::shared_ptr< ::dm_motor::MotorFeedback const> MotorFeedbackConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::dm_motor::MotorFeedback_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::dm_motor::MotorFeedback_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::dm_motor::MotorFeedback_<ContainerAllocator1> & lhs, const ::dm_motor::MotorFeedback_<ContainerAllocator2> & rhs)
{
  return lhs.pos == rhs.pos &&
    lhs.vel == rhs.vel &&
    lhs.t == rhs.t;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::dm_motor::MotorFeedback_<ContainerAllocator1> & lhs, const ::dm_motor::MotorFeedback_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace dm_motor

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::dm_motor::MotorFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::dm_motor::MotorFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dm_motor::MotorFeedback_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::dm_motor::MotorFeedback_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dm_motor::MotorFeedback_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::dm_motor::MotorFeedback_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::dm_motor::MotorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cd635028afaa0f6aed3ef11a40a1d7e5";
  }

  static const char* value(const ::dm_motor::MotorFeedback_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcd635028afaa0f6aULL;
  static const uint64_t static_value2 = 0xed3ef11a40a1d7e5ULL;
};

template<class ContainerAllocator>
struct DataType< ::dm_motor::MotorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dm_motor/MotorFeedback";
  }

  static const char* value(const ::dm_motor::MotorFeedback_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::dm_motor::MotorFeedback_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 pos\n"
"float32 vel\n"
"float32 t\n"
;
  }

  static const char* value(const ::dm_motor::MotorFeedback_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::dm_motor::MotorFeedback_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.pos);
      stream.next(m.vel);
      stream.next(m.t);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MotorFeedback_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::dm_motor::MotorFeedback_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::dm_motor::MotorFeedback_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "pos: ";
    Printer<float>::stream(s, indent + "  ", v.pos);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "vel: ";
    Printer<float>::stream(s, indent + "  ", v.vel);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "t: ";
    Printer<float>::stream(s, indent + "  ", v.t);
  }
};

} // namespace message_operations
} // namespace ros

#endif // DM_MOTOR_MESSAGE_MOTORFEEDBACK_H
