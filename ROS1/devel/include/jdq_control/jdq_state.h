// Generated by gencpp from file jdq_control/jdq_state.msg
// DO NOT EDIT!


#ifndef JDQ_CONTROL_MESSAGE_JDQ_STATE_H
#define JDQ_CONTROL_MESSAGE_JDQ_STATE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace jdq_control
{
template <class ContainerAllocator>
struct jdq_state_
{
  typedef jdq_state_<ContainerAllocator> Type;

  jdq_state_()
    : USB1()
    , USB2()
    , USB3()
    , USB4()
    , USB5()
    , USB6()
    , USB7()
    , USB8()  {
    }
  jdq_state_(const ContainerAllocator& _alloc)
    : USB1(_alloc)
    , USB2(_alloc)
    , USB3(_alloc)
    , USB4(_alloc)
    , USB5(_alloc)
    , USB6(_alloc)
    , USB7(_alloc)
    , USB8(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _USB1_type;
  _USB1_type USB1;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _USB2_type;
  _USB2_type USB2;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _USB3_type;
  _USB3_type USB3;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _USB4_type;
  _USB4_type USB4;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _USB5_type;
  _USB5_type USB5;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _USB6_type;
  _USB6_type USB6;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _USB7_type;
  _USB7_type USB7;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _USB8_type;
  _USB8_type USB8;





  typedef boost::shared_ptr< ::jdq_control::jdq_state_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::jdq_control::jdq_state_<ContainerAllocator> const> ConstPtr;

}; // struct jdq_state_

typedef ::jdq_control::jdq_state_<std::allocator<void> > jdq_state;

typedef boost::shared_ptr< ::jdq_control::jdq_state > jdq_statePtr;
typedef boost::shared_ptr< ::jdq_control::jdq_state const> jdq_stateConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::jdq_control::jdq_state_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::jdq_control::jdq_state_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::jdq_control::jdq_state_<ContainerAllocator1> & lhs, const ::jdq_control::jdq_state_<ContainerAllocator2> & rhs)
{
  return lhs.USB1 == rhs.USB1 &&
    lhs.USB2 == rhs.USB2 &&
    lhs.USB3 == rhs.USB3 &&
    lhs.USB4 == rhs.USB4 &&
    lhs.USB5 == rhs.USB5 &&
    lhs.USB6 == rhs.USB6 &&
    lhs.USB7 == rhs.USB7 &&
    lhs.USB8 == rhs.USB8;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::jdq_control::jdq_state_<ContainerAllocator1> & lhs, const ::jdq_control::jdq_state_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace jdq_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::jdq_control::jdq_state_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::jdq_control::jdq_state_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jdq_control::jdq_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::jdq_control::jdq_state_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jdq_control::jdq_state_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::jdq_control::jdq_state_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::jdq_control::jdq_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ce22d24026240afb77c18e56ea2ac5ba";
  }

  static const char* value(const ::jdq_control::jdq_state_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xce22d24026240afbULL;
  static const uint64_t static_value2 = 0x77c18e56ea2ac5baULL;
};

template<class ContainerAllocator>
struct DataType< ::jdq_control::jdq_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "jdq_control/jdq_state";
  }

  static const char* value(const ::jdq_control::jdq_state_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::jdq_control::jdq_state_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string USB1\n"
"string USB2\n"
"string USB3\n"
"string USB4\n"
"string USB5\n"
"string USB6\n"
"string USB7\n"
"string USB8\n"
;
  }

  static const char* value(const ::jdq_control::jdq_state_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::jdq_control::jdq_state_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.USB1);
      stream.next(m.USB2);
      stream.next(m.USB3);
      stream.next(m.USB4);
      stream.next(m.USB5);
      stream.next(m.USB6);
      stream.next(m.USB7);
      stream.next(m.USB8);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct jdq_state_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::jdq_control::jdq_state_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::jdq_control::jdq_state_<ContainerAllocator>& v)
  {
    if (false || !indent.empty())
      s << std::endl;
    s << indent << "USB1: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.USB1);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "USB2: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.USB2);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "USB3: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.USB3);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "USB4: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.USB4);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "USB5: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.USB5);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "USB6: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.USB6);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "USB7: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.USB7);
    if (true || !indent.empty())
      s << std::endl;
    s << indent << "USB8: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.USB8);
  }
};

} // namespace message_operations
} // namespace ros

#endif // JDQ_CONTROL_MESSAGE_JDQ_STATE_H
