# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from armcontrol_demo_pkg/hdrarm_msg.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class hdrarm_msg(genpy.Message):
  _md5sum = "5a62e58a22a17162b499a805b6b83bb9"
  _type = "armcontrol_demo_pkg/hdrarm_msg"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """string motor_state      #电机状态   ps:enable/disable
string arm_mode		    #机械臂模式	ps:arm_sleep/arm_control_demo/arm_control_moveit_fk/arm_control_moveit_ik
bool Emergency_Stop     #急停
string drag_teachin     #拖动示教   ps:false/write/read
string drag_teachin_name#拖动示教存储文件名
float64 joint1_angle    #moveit正解使用
float64 joint2_angle    #moveit正解使用
float64 joint3_angle    #moveit正解使用
float64 joint4_angle    #moveit正解使用
float64 joint5_angle    #moveit正解使用
float64 joint6_angle    #moveit正解使用
float64 arm_position_x		#moveit逆解使用
float64 arm_position_y		#moveit逆解使用
float64 arm_position_z		#moveit逆解使用
float64 arm_orientation_x	#moveit逆解使用
float64 arm_orientation_y	#moveit逆解使用
float64 arm_orientation_z	#moveit逆解使用
float64 arm_orientation_w	#moveit逆解使用"""
  __slots__ = ['motor_state','arm_mode','Emergency_Stop','drag_teachin','drag_teachin_name','joint1_angle','joint2_angle','joint3_angle','joint4_angle','joint5_angle','joint6_angle','arm_position_x','arm_position_y','arm_position_z','arm_orientation_x','arm_orientation_y','arm_orientation_z','arm_orientation_w']
  _slot_types = ['string','string','bool','string','string','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       motor_state,arm_mode,Emergency_Stop,drag_teachin,drag_teachin_name,joint1_angle,joint2_angle,joint3_angle,joint4_angle,joint5_angle,joint6_angle,arm_position_x,arm_position_y,arm_position_z,arm_orientation_x,arm_orientation_y,arm_orientation_z,arm_orientation_w

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(hdrarm_msg, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.motor_state is None:
        self.motor_state = ''
      if self.arm_mode is None:
        self.arm_mode = ''
      if self.Emergency_Stop is None:
        self.Emergency_Stop = False
      if self.drag_teachin is None:
        self.drag_teachin = ''
      if self.drag_teachin_name is None:
        self.drag_teachin_name = ''
      if self.joint1_angle is None:
        self.joint1_angle = 0.
      if self.joint2_angle is None:
        self.joint2_angle = 0.
      if self.joint3_angle is None:
        self.joint3_angle = 0.
      if self.joint4_angle is None:
        self.joint4_angle = 0.
      if self.joint5_angle is None:
        self.joint5_angle = 0.
      if self.joint6_angle is None:
        self.joint6_angle = 0.
      if self.arm_position_x is None:
        self.arm_position_x = 0.
      if self.arm_position_y is None:
        self.arm_position_y = 0.
      if self.arm_position_z is None:
        self.arm_position_z = 0.
      if self.arm_orientation_x is None:
        self.arm_orientation_x = 0.
      if self.arm_orientation_y is None:
        self.arm_orientation_y = 0.
      if self.arm_orientation_z is None:
        self.arm_orientation_z = 0.
      if self.arm_orientation_w is None:
        self.arm_orientation_w = 0.
    else:
      self.motor_state = ''
      self.arm_mode = ''
      self.Emergency_Stop = False
      self.drag_teachin = ''
      self.drag_teachin_name = ''
      self.joint1_angle = 0.
      self.joint2_angle = 0.
      self.joint3_angle = 0.
      self.joint4_angle = 0.
      self.joint5_angle = 0.
      self.joint6_angle = 0.
      self.arm_position_x = 0.
      self.arm_position_y = 0.
      self.arm_position_z = 0.
      self.arm_orientation_x = 0.
      self.arm_orientation_y = 0.
      self.arm_orientation_z = 0.
      self.arm_orientation_w = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.motor_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.arm_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Emergency_Stop
      buff.write(_get_struct_B().pack(_x))
      _x = self.drag_teachin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.drag_teachin_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13d().pack(_x.joint1_angle, _x.joint2_angle, _x.joint3_angle, _x.joint4_angle, _x.joint5_angle, _x.joint6_angle, _x.arm_position_x, _x.arm_position_y, _x.arm_position_z, _x.arm_orientation_x, _x.arm_orientation_y, _x.arm_orientation_z, _x.arm_orientation_w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motor_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.arm_mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.arm_mode = str[start:end]
      start = end
      end += 1
      (self.Emergency_Stop,) = _get_struct_B().unpack(str[start:end])
      self.Emergency_Stop = bool(self.Emergency_Stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drag_teachin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.drag_teachin = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drag_teachin_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.drag_teachin_name = str[start:end]
      _x = self
      start = end
      end += 104
      (_x.joint1_angle, _x.joint2_angle, _x.joint3_angle, _x.joint4_angle, _x.joint5_angle, _x.joint6_angle, _x.arm_position_x, _x.arm_position_y, _x.arm_position_z, _x.arm_orientation_x, _x.arm_orientation_y, _x.arm_orientation_z, _x.arm_orientation_w,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.motor_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.arm_mode
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.Emergency_Stop
      buff.write(_get_struct_B().pack(_x))
      _x = self.drag_teachin
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.drag_teachin_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_13d().pack(_x.joint1_angle, _x.joint2_angle, _x.joint3_angle, _x.joint4_angle, _x.joint5_angle, _x.joint6_angle, _x.arm_position_x, _x.arm_position_y, _x.arm_position_z, _x.arm_orientation_x, _x.arm_orientation_y, _x.arm_orientation_z, _x.arm_orientation_w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.motor_state = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.motor_state = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.arm_mode = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.arm_mode = str[start:end]
      start = end
      end += 1
      (self.Emergency_Stop,) = _get_struct_B().unpack(str[start:end])
      self.Emergency_Stop = bool(self.Emergency_Stop)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drag_teachin = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.drag_teachin = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.drag_teachin_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.drag_teachin_name = str[start:end]
      _x = self
      start = end
      end += 104
      (_x.joint1_angle, _x.joint2_angle, _x.joint3_angle, _x.joint4_angle, _x.joint5_angle, _x.joint6_angle, _x.arm_position_x, _x.arm_position_y, _x.arm_position_z, _x.arm_orientation_x, _x.arm_orientation_y, _x.arm_orientation_z, _x.arm_orientation_w,) = _get_struct_13d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_13d = None
def _get_struct_13d():
    global _struct_13d
    if _struct_13d is None:
        _struct_13d = struct.Struct("<13d")
    return _struct_13d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
